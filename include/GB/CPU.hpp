#ifndef INCLUDE_GB_CPU_HPP_
#define INCLUDE_GB_CPU_HPP_

#include <functional>
#include <vector>

#include "GB/MMU.hpp"
#include "GB/Registers.hpp"

namespace GB {
class CPU {
 public:
  CPU();

 private:
  Registers registers;
  MMU mmu;

  struct Instruction {
    std::function<void()> opcode;
    uint8_t length;
    uint8_t cycles;
  };

  std::vector<Instruction> opcode_table;
  std::vector<Instruction> opcode_table_CB;

  // Basic Opcodes
  void OP_0x00();
  void OP_0x01();
  void OP_0x02();
  void OP_0x03();
  void OP_0x04();
  void OP_0x05();
  void OP_0x06();
  void OP_0x07();
  void OP_0x08();
  void OP_0x09();
  void OP_0x0A();
  void OP_0x0B();
  void OP_0x0C();
  void OP_0x0D();
  void OP_0x0E();
  void OP_0x0F();
  void OP_0x10();
  void OP_0x11();
  void OP_0x12();
  void OP_0x13();
  void OP_0x14();
  void OP_0x15();
  void OP_0x16();
  void OP_0x17();
  void OP_0x18();
  void OP_0x19();
  void OP_0x1A();
  void OP_0x1B();
  void OP_0x1C();
  void OP_0x1D();
  void OP_0x1E();
  void OP_0x1F();
  void OP_0x20();
  void OP_0x21();
  void OP_0x22();
  void OP_0x23();
  void OP_0x24();
  void OP_0x25();
  void OP_0x26();
  void OP_0x27();
  void OP_0x28();
  void OP_0x29();
  void OP_0x2A();
  void OP_0x2B();
  void OP_0x2C();
  void OP_0x2D();
  void OP_0x2E();
  void OP_0x2F();
  void OP_0x30();
  void OP_0x31();
  void OP_0x32();
  void OP_0x33();
  void OP_0x34();
  void OP_0x35();
  void OP_0x36();
  void OP_0x37();
  void OP_0x38();
  void OP_0x39();
  void OP_0x3A();
  void OP_0x3B();
  void OP_0x3C();
  void OP_0x3D();
  void OP_0x3E();
  void OP_0x3F();
  void OP_0x40();
  void OP_0x41();
  void OP_0x42();
  void OP_0x43();
  void OP_0x44();
  void OP_0x45();
  void OP_0x46();
  void OP_0x47();
  void OP_0x48();
  void OP_0x49();
  void OP_0x4A();
  void OP_0x4B();
  void OP_0x4C();
  void OP_0x4D();
  void OP_0x4E();
  void OP_0x4F();
  void OP_0x50();
  void OP_0x51();
  void OP_0x52();
  void OP_0x53();
  void OP_0x54();
  void OP_0x55();
  void OP_0x56();
  void OP_0x57();
  void OP_0x58();
  void OP_0x59();
  void OP_0x5A();
  void OP_0x5B();
  void OP_0x5C();
  void OP_0x5D();
  void OP_0x5E();
  void OP_0x5F();
  void OP_0x60();
  void OP_0x61();
  void OP_0x62();
  void OP_0x63();
  void OP_0x64();
  void OP_0x65();
  void OP_0x66();
  void OP_0x67();
  void OP_0x68();
  void OP_0x69();
  void OP_0x6A();
  void OP_0x6B();
  void OP_0x6C();
  void OP_0x6D();
  void OP_0x6E();
  void OP_0x6F();
  void OP_0x70();
  void OP_0x71();
  void OP_0x72();
  void OP_0x73();
  void OP_0x74();
  void OP_0x75();
  void OP_0x76();
  void OP_0x77();
  void OP_0x78();
  void OP_0x79();
  void OP_0x7A();
  void OP_0x7B();
  void OP_0x7C();
  void OP_0x7D();
  void OP_0x7E();
  void OP_0x7F();
  void OP_0x80();
  void OP_0x81();
  void OP_0x82();
  void OP_0x83();
  void OP_0x84();
  void OP_0x85();
  void OP_0x86();
  void OP_0x87();
  void OP_0x88();
  void OP_0x89();
  void OP_0x8A();
  void OP_0x8B();
  void OP_0x8C();
  void OP_0x8D();
  void OP_0x8E();
  void OP_0x8F();
  void OP_0x90();
  void OP_0x91();
  void OP_0x92();
  void OP_0x93();
  void OP_0x94();
  void OP_0x95();
  void OP_0x96();
  void OP_0x97();
  void OP_0x98();
  void OP_0x99();
  void OP_0x9A();
  void OP_0x9B();
  void OP_0x9C();
  void OP_0x9D();
  void OP_0x9E();
  void OP_0x9F();
  void OP_0xA0();
  void OP_0xA1();
  void OP_0xA2();
  void OP_0xA3();
  void OP_0xA4();
  void OP_0xA5();
  void OP_0xA6();
  void OP_0xA7();
  void OP_0xA8();
  void OP_0xA9();
  void OP_0xAA();
  void OP_0xAB();
  void OP_0xAC();
  void OP_0xAD();
  void OP_0xAE();
  void OP_0xAF();
  void OP_0xB0();
  void OP_0xB1();
  void OP_0xB2();
  void OP_0xB3();
  void OP_0xB4();
  void OP_0xB5();
  void OP_0xB6();
  void OP_0xB7();
  void OP_0xB8();
  void OP_0xB9();
  void OP_0xBA();
  void OP_0xBB();
  void OP_0xBC();
  void OP_0xBD();
  void OP_0xBE();
  void OP_0xBF();
  void OP_0xC0();
  void OP_0xC1();
  void OP_0xC2();
  void OP_0xC3();
  void OP_0xC4();
  void OP_0xC5();
  void OP_0xC6();
  void OP_0xC7();
  void OP_0xC8();
  void OP_0xC9();
  void OP_0xCA();
  void OP_0xCB();
  void OP_0xCC();
  void OP_0xCD();
  void OP_0xCE();
  void OP_0xCF();
  void OP_0xD0();
  void OP_0xD1();
  void OP_0xD2();
  void OP_0xD3();
  void OP_0xD4();
  void OP_0xD5();
  void OP_0xD6();
  void OP_0xD7();
  void OP_0xD8();
  void OP_0xD9();
  void OP_0xDA();
  void OP_0xDB();
  void OP_0xDC();
  void OP_0xDD();
  void OP_0xDE();
  void OP_0xDF();
  void OP_0xE0();
  void OP_0xE1();
  void OP_0xE2();
  void OP_0xE3();
  void OP_0xE4();
  void OP_0xE5();
  void OP_0xE6();
  void OP_0xE7();
  void OP_0xE8();
  void OP_0xE9();
  void OP_0xEA();
  void OP_0xEB();
  void OP_0xEC();
  void OP_0xED();
  void OP_0xEE();
  void OP_0xEF();
  void OP_0xF0();
  void OP_0xF1();
  void OP_0xF2();
  void OP_0xF3();
  void OP_0xF4();
  void OP_0xF5();
  void OP_0xF6();
  void OP_0xF7();
  void OP_0xF8();
  void OP_0xF9();
  void OP_0xFA();
  void OP_0xFB();
  void OP_0xFC();
  void OP_0xFD();
  void OP_0xFE();
  void OP_0xFF();

  // CB prefixed opcodes
  void OP_0xCB00();
  void OP_0xCB01();
  void OP_0xCB02();
  void OP_0xCB03();
  void OP_0xCB04();
  void OP_0xCB05();
  void OP_0xCB06();
  void OP_0xCB07();
  void OP_0xCB08();
  void OP_0xCB09();
  void OP_0xCB0A();
  void OP_0xCB0B();
  void OP_0xCB0C();
  void OP_0xCB0D();
  void OP_0xCB0E();
  void OP_0xCB0F();
  void OP_0xCB10();
  void OP_0xCB11();
  void OP_0xCB12();
  void OP_0xCB13();
  void OP_0xCB14();
  void OP_0xCB15();
  void OP_0xCB16();
  void OP_0xCB17();
  void OP_0xCB18();
  void OP_0xCB19();
  void OP_0xCB1A();
  void OP_0xCB1B();
  void OP_0xCB1C();
  void OP_0xCB1D();
  void OP_0xCB1E();
  void OP_0xCB1F();
  void OP_0xCB20();
  void OP_0xCB21();
  void OP_0xCB22();
  void OP_0xCB23();
  void OP_0xCB24();
  void OP_0xCB25();
  void OP_0xCB26();
  void OP_0xCB27();
  void OP_0xCB28();
  void OP_0xCB29();
  void OP_0xCB2A();
  void OP_0xCB2B();
  void OP_0xCB2C();
  void OP_0xCB2D();
  void OP_0xCB2E();
  void OP_0xCB2F();
  void OP_0xCB30();
  void OP_0xCB31();
  void OP_0xCB32();
  void OP_0xCB33();
  void OP_0xCB34();
  void OP_0xCB35();
  void OP_0xCB36();
  void OP_0xCB37();
  void OP_0xCB38();
  void OP_0xCB39();
  void OP_0xCB3A();
  void OP_0xCB3B();
  void OP_0xCB3C();
  void OP_0xCB3D();
  void OP_0xCB3E();
  void OP_0xCB3F();
  void OP_0xCB40();
  void OP_0xCB41();
  void OP_0xCB42();
  void OP_0xCB43();
  void OP_0xCB44();
  void OP_0xCB45();
  void OP_0xCB46();
  void OP_0xCB47();
  void OP_0xCB48();
  void OP_0xCB49();
  void OP_0xCB4A();
  void OP_0xCB4B();
  void OP_0xCB4C();
  void OP_0xCB4D();
  void OP_0xCB4E();
  void OP_0xCB4F();
  void OP_0xCB50();
  void OP_0xCB51();
  void OP_0xCB52();
  void OP_0xCB53();
  void OP_0xCB54();
  void OP_0xCB55();
  void OP_0xCB56();
  void OP_0xCB57();
  void OP_0xCB58();
  void OP_0xCB59();
  void OP_0xCB5A();
  void OP_0xCB5B();
  void OP_0xCB5C();
  void OP_0xCB5D();
  void OP_0xCB5E();
  void OP_0xCB5F();
  void OP_0xCB60();
  void OP_0xCB61();
  void OP_0xCB62();
  void OP_0xCB63();
  void OP_0xCB64();
  void OP_0xCB65();
  void OP_0xCB66();
  void OP_0xCB67();
  void OP_0xCB68();
  void OP_0xCB69();
  void OP_0xCB6A();
  void OP_0xCB6B();
  void OP_0xCB6C();
  void OP_0xCB6D();
  void OP_0xCB6E();
  void OP_0xCB6F();
  void OP_0xCB70();
  void OP_0xCB71();
  void OP_0xCB72();
  void OP_0xCB73();
  void OP_0xCB74();
  void OP_0xCB75();
  void OP_0xCB76();
  void OP_0xCB77();
  void OP_0xCB78();
  void OP_0xCB79();
  void OP_0xCB7A();
  void OP_0xCB7B();
  void OP_0xCB7C();
  void OP_0xCB7D();
  void OP_0xCB7E();
  void OP_0xCB7F();
  void OP_0xCB80();
  void OP_0xCB81();
  void OP_0xCB82();
  void OP_0xCB83();
  void OP_0xCB84();
  void OP_0xCB85();
  void OP_0xCB86();
  void OP_0xCB87();
  void OP_0xCB88();
  void OP_0xCB89();
  void OP_0xCB8A();
  void OP_0xCB8B();
  void OP_0xCB8C();
  void OP_0xCB8D();
  void OP_0xCB8E();
  void OP_0xCB8F();
  void OP_0xCB90();
  void OP_0xCB91();
  void OP_0xCB92();
  void OP_0xCB93();
  void OP_0xCB94();
  void OP_0xCB95();
  void OP_0xCB96();
  void OP_0xCB97();
  void OP_0xCB98();
  void OP_0xCB99();
  void OP_0xCB9A();
  void OP_0xCB9B();
  void OP_0xCB9C();
  void OP_0xCB9D();
  void OP_0xCB9E();
  void OP_0xCB9F();
  void OP_0xCBA0();
  void OP_0xCBA1();
  void OP_0xCBA2();
  void OP_0xCBA3();
  void OP_0xCBA4();
  void OP_0xCBA5();
  void OP_0xCBA6();
  void OP_0xCBA7();
  void OP_0xCBA8();
  void OP_0xCBA9();
  void OP_0xCBAA();
  void OP_0xCBAB();
  void OP_0xCBAC();
  void OP_0xCBAD();
  void OP_0xCBAE();
  void OP_0xCBAF();
  void OP_0xCBB0();
  void OP_0xCBB1();
  void OP_0xCBB2();
  void OP_0xCBB3();
  void OP_0xCBB4();
  void OP_0xCBB5();
  void OP_0xCBB6();
  void OP_0xCBB7();
  void OP_0xCBB8();
  void OP_0xCBB9();
  void OP_0xCBBA();
  void OP_0xCBBB();
  void OP_0xCBBC();
  void OP_0xCBBD();
  void OP_0xCBBE();
  void OP_0xCBBF();
  void OP_0xCBC0();
  void OP_0xCBC1();
  void OP_0xCBC2();
  void OP_0xCBC3();
  void OP_0xCBC4();
  void OP_0xCBC5();
  void OP_0xCBC6();
  void OP_0xCBC7();
  void OP_0xCBC8();
  void OP_0xCBC9();
  void OP_0xCBCA();
  void OP_0xCBCB();
  void OP_0xCBCC();
  void OP_0xCBCD();
  void OP_0xCBCE();
  void OP_0xCBCF();
  void OP_0xCBD0();
  void OP_0xCBD1();
  void OP_0xCBD2();
  void OP_0xCBD3();
  void OP_0xCBD4();
  void OP_0xCBD5();
  void OP_0xCBD6();
  void OP_0xCBD7();
  void OP_0xCBD8();
  void OP_0xCBD9();
  void OP_0xCBDA();
  void OP_0xCBDB();
  void OP_0xCBDC();
  void OP_0xCBDD();
  void OP_0xCBDE();
  void OP_0xCBDF();
  void OP_0xCBE0();
  void OP_0xCBE1();
  void OP_0xCBE2();
  void OP_0xCBE3();
  void OP_0xCBE4();
  void OP_0xCBE5();
  void OP_0xCBE6();
  void OP_0xCBE7();
  void OP_0xCBE8();
  void OP_0xCBE9();
  void OP_0xCBEA();
  void OP_0xCBEB();
  void OP_0xCBEC();
  void OP_0xCBED();
  void OP_0xCBEE();
  void OP_0xCBEF();
  void OP_0xCBF0();
  void OP_0xCBF1();
  void OP_0xCBF2();
  void OP_0xCBF3();
  void OP_0xCBF4();
  void OP_0xCBF5();
  void OP_0xCBF6();
  void OP_0xCBF7();
  void OP_0xCBF8();
  void OP_0xCBF9();
  void OP_0xCBFA();
  void OP_0xCBFB();
  void OP_0xCBFC();
  void OP_0xCBFD();
  void OP_0xCBFE();
  void OP_0xCBFF();
};
}  // namespace GB

#endif  // INCLUDE_GB_CPU_HPP_
